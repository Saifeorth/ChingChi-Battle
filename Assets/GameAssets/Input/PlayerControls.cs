//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/GameAssets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""CarControls"",
            ""id"": ""2b42633d-25fa-429b-98fa-2549b7d1ebee"",
            ""actions"": [
                {
                    ""name"": ""CarMovement"",
                    ""type"": ""Value"",
                    ""id"": ""e18db7cd-a5fa-44aa-a9b0-185ba7ab9d08"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""96ebf9ad-fe15-4ece-9abd-6c343cf96cb8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CarMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""71f8cb71-441c-462d-9c0a-b0bd4d8ada52"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CarMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8ddce2fe-a6ce-4a3f-8d3b-a5b0dbfce6e9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CarMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""51d839ae-33ea-4ac4-ac4b-a52ca692713e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CarMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3b313a41-92aa-48f1-896b-19884ead9eb6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CarMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ShootingControls"",
            ""id"": ""bc8088b7-afbc-4146-873a-c141633d8080"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""2b77270d-24ed-42ce-9c74-94baedcec985"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f2e9c3f-7c18-4852-b6a9-fa195f5fbc33"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CarControls
        m_CarControls = asset.FindActionMap("CarControls", throwIfNotFound: true);
        m_CarControls_CarMovement = m_CarControls.FindAction("CarMovement", throwIfNotFound: true);
        // ShootingControls
        m_ShootingControls = asset.FindActionMap("ShootingControls", throwIfNotFound: true);
        m_ShootingControls_Fire = m_ShootingControls.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CarControls
    private readonly InputActionMap m_CarControls;
    private ICarControlsActions m_CarControlsActionsCallbackInterface;
    private readonly InputAction m_CarControls_CarMovement;
    public struct CarControlsActions
    {
        private @PlayerControls m_Wrapper;
        public CarControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CarMovement => m_Wrapper.m_CarControls_CarMovement;
        public InputActionMap Get() { return m_Wrapper.m_CarControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarControlsActions set) { return set.Get(); }
        public void SetCallbacks(ICarControlsActions instance)
        {
            if (m_Wrapper.m_CarControlsActionsCallbackInterface != null)
            {
                @CarMovement.started -= m_Wrapper.m_CarControlsActionsCallbackInterface.OnCarMovement;
                @CarMovement.performed -= m_Wrapper.m_CarControlsActionsCallbackInterface.OnCarMovement;
                @CarMovement.canceled -= m_Wrapper.m_CarControlsActionsCallbackInterface.OnCarMovement;
            }
            m_Wrapper.m_CarControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CarMovement.started += instance.OnCarMovement;
                @CarMovement.performed += instance.OnCarMovement;
                @CarMovement.canceled += instance.OnCarMovement;
            }
        }
    }
    public CarControlsActions @CarControls => new CarControlsActions(this);

    // ShootingControls
    private readonly InputActionMap m_ShootingControls;
    private IShootingControlsActions m_ShootingControlsActionsCallbackInterface;
    private readonly InputAction m_ShootingControls_Fire;
    public struct ShootingControlsActions
    {
        private @PlayerControls m_Wrapper;
        public ShootingControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_ShootingControls_Fire;
        public InputActionMap Get() { return m_Wrapper.m_ShootingControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootingControlsActions set) { return set.Get(); }
        public void SetCallbacks(IShootingControlsActions instance)
        {
            if (m_Wrapper.m_ShootingControlsActionsCallbackInterface != null)
            {
                @Fire.started -= m_Wrapper.m_ShootingControlsActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_ShootingControlsActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_ShootingControlsActionsCallbackInterface.OnFire;
            }
            m_Wrapper.m_ShootingControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
            }
        }
    }
    public ShootingControlsActions @ShootingControls => new ShootingControlsActions(this);
    public interface ICarControlsActions
    {
        void OnCarMovement(InputAction.CallbackContext context);
    }
    public interface IShootingControlsActions
    {
        void OnFire(InputAction.CallbackContext context);
    }
}
